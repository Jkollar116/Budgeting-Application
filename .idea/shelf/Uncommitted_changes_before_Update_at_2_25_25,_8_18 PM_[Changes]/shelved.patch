Index: src/main/java/org/example/Login.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\n\nimport com.sun.net.httpserver.HttpServer;\nimport com.sun.net.httpserver.HttpHandler;\nimport com.sun.net.httpserver.HttpExchange;\nimport java.io.*;\nimport java.net.*;\nimport java.nio.charset.*;\nimport java.nio.file.*;\nimport java.awt.*;\nimport com.sun.net.httpserver.*;\n\npublic class Login {\n    private static final String FIREBASE_API_KEY = \"AIzaSyAuSN96Py8Sr0xONWOG_LpOPSZ6EgerX98\";\n\n    public static void main(String[] args) throws Exception {\n        HttpServer server = HttpServer.create(new InetSocketAddress(8000), 0);\n        server.createContext(\"/\", new StaticFileHandler());\n        server.createContext(\"/login\", new LoginHandler());\n        server.createContext(\"/register\", new RegisterHandler());\n        server.createContext(\"/forgot\", new ForgotPasswordHandler());\n        server.createContext(\"/api/getData\", new HomeDataHandler());\n        server.createContext(\"/api/chat\", new ChatHandler());\n        server.setExecutor(null);\n        server.start();\n        if (Desktop.isDesktopSupported()) {\n            Desktop.getDesktop().browse(new URI(\"http://localhost:8000\"));\n        }\n    }\n\n    static class StaticFileHandler implements HttpHandler {\n        private final String basePath = \"src/main/resources\";\n        public void handle(HttpExchange exchange) throws IOException {\n            String uriPath = exchange.getRequestURI().getPath();\n            if (uriPath.equals(\"/\")) {\n                uriPath = \"/index.html\";\n            }\n            File file = new File(basePath + uriPath).getCanonicalFile();\n            if (!file.getPath().startsWith(new File(basePath).getCanonicalPath())) {\n                exchange.sendResponseHeaders(403, 0);\n                exchange.getResponseBody().close();\n                return;\n            }\n            if (!file.isFile()) {\n                exchange.sendResponseHeaders(404, 0);\n                exchange.getResponseBody().close();\n                return;\n            }\n            String mime = \"text/plain\";\n            if (uriPath.endsWith(\".html\")) {\n                mime = \"text/html\";\n            } else if (uriPath.endsWith(\".css\")) {\n                mime = \"text/css\";\n            } else if (uriPath.endsWith(\".js\")) {\n                mime = \"application/javascript\";\n            }\n            exchange.getResponseHeaders().set(\"Content-Type\", mime);\n            byte[] bytes = Files.readAllBytes(file.toPath());\n            exchange.sendResponseHeaders(200, bytes.length);\n            OutputStream os = exchange.getResponseBody();\n            os.write(bytes);\n            os.close();\n        }\n    }\n\n    static class LoginHandler implements HttpHandler {\n        public void handle(HttpExchange exchange) throws IOException {\n            if (\"POST\".equalsIgnoreCase(exchange.getRequestMethod())) {\n                InputStreamReader isr = new InputStreamReader(exchange.getRequestBody(), StandardCharsets.UTF_8);\n                BufferedReader br = new BufferedReader(isr);\n                StringBuilder buf = new StringBuilder();\n                String line;\n                while ((line = br.readLine()) != null) {\n                    buf.append(line);\n                }\n                String formData = buf.toString();\n                String email = \"\";\n                String password = \"\";\n                String[] pairs = formData.split(\"&\");\n                for (String pair : pairs) {\n                    String[] parts = pair.split(\"=\");\n                    if (parts.length == 2) {\n                        String key = URLDecoder.decode(parts[0], \"UTF-8\");\n                        String value = URLDecoder.decode(parts[1], \"UTF-8\");\n                        if (key.equals(\"email\")) {\n                            email = value;\n                        } else if (key.equals(\"password\")) {\n                            password = value;\n                        }\n                    }\n                }\n                String firebaseUrl = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\" + FIREBASE_API_KEY;\n                URL url = new URL(firebaseUrl);\n                HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n                conn.setRequestMethod(\"POST\");\n                conn.setRequestProperty(\"Content-Type\", \"application/json\");\n                conn.setDoOutput(true);\n                String jsonPayload = \"{\\\"email\\\":\\\"\" + email + \"\\\",\\\"password\\\":\\\"\" + password + \"\\\",\\\"returnSecureToken\\\":true}\";\n                OutputStream os = conn.getOutputStream();\n                os.write(jsonPayload.getBytes(StandardCharsets.UTF_8));\n                os.close();\n                int responseCode = conn.getResponseCode();\n                if (responseCode == 200) {\n                    exchange.getResponseHeaders().set(\"Location\", \"/home.html\");\n                    exchange.sendResponseHeaders(302, -1);\n                    return;\n                } else {\n                    InputStream errorStream = conn.getErrorStream();\n                    InputStreamReader isrError = new InputStreamReader(errorStream, StandardCharsets.UTF_8);\n                    BufferedReader in = new BufferedReader(isrError);\n                    StringBuilder response = new StringBuilder();\n                    while ((line = in.readLine()) != null) {\n                        response.append(line);\n                    }\n                    in.close();\n                    String userMessage = \"Invalid email or password. Please try again.\";\n                    String errorHtml = \"<!DOCTYPE html><html lang=\\\"en\\\"><head><meta charset=\\\"UTF-8\\\"><title>Login Error</title>\"\n                            + \"<link rel=\\\"stylesheet\\\" href=\\\"style.css\\\"></head><body>\"\n                            + \"<div class=\\\"login-container\\\"><h2>Login Error</h2><p>\" + userMessage + \"</p>\"\n                            + \"<a href='/index.html'>Try Again</a></div></body></html>\";\n                    exchange.getResponseHeaders().set(\"Content-Type\", \"text/html; charset=UTF-8\");\n                    byte[] errorBytes = errorHtml.getBytes(StandardCharsets.UTF_8);\n                    exchange.sendResponseHeaders(200, errorBytes.length);\n                    OutputStream osResp = exchange.getResponseBody();\n                    osResp.write(errorBytes);\n                    osResp.close();\n                }\n            } else {\n                exchange.sendResponseHeaders(405, -1);\n            }\n        }\n    }\n\n    static class RegisterHandler implements HttpHandler {\n        private final String basePath = \"src/main/resources\";\n        public void handle(HttpExchange exchange) throws IOException {\n            if (\"GET\".equalsIgnoreCase(exchange.getRequestMethod())) {\n                String fileName = \"/register.html\";\n                File file = new File(basePath + fileName).getCanonicalFile();\n                if (!file.isFile()) {\n                    exchange.sendResponseHeaders(404, 0);\n                    exchange.getResponseBody().close();\n                    return;\n                }\n                String mime = \"text/html\";\n                exchange.getResponseHeaders().set(\"Content-Type\", mime);\n                byte[] bytes = Files.readAllBytes(file.toPath());\n                exchange.sendResponseHeaders(200, bytes.length);\n                OutputStream os = exchange.getResponseBody();\n                os.write(bytes);\n                os.close();\n                return;\n            } else if (\"POST\".equalsIgnoreCase(exchange.getRequestMethod())) {\n                InputStreamReader isr = new InputStreamReader(exchange.getRequestBody(), StandardCharsets.UTF_8);\n                BufferedReader br = new BufferedReader(isr);\n                StringBuilder buf = new StringBuilder();\n                String line;\n                while ((line = br.readLine()) != null) {\n                    buf.append(line);\n                }\n                String formData = buf.toString();\n                String email = \"\";\n                String password = \"\";\n                String confirm = \"\";\n                String[] pairs = formData.split(\"&\");\n                for (String pair : pairs) {\n                    String[] parts = pair.split(\"=\");\n                    if (parts.length == 2) {\n                        String key = URLDecoder.decode(parts[0], \"UTF-8\");\n                        String value = URLDecoder.decode(parts[1], \"UTF-8\");\n                        if (key.equals(\"email\")) {\n                            email = value;\n                        } else if (key.equals(\"password\")) {\n                            password = value;\n                        } else if (key.equals(\"confirm\")) {\n                            confirm = value;\n                        }\n                    }\n                }\n                if (!password.equals(confirm)) {\n                    String errorHtml = \"<!DOCTYPE html><html lang=\\\"en\\\"><head><meta charset=\\\"UTF-8\\\"><title>Registration Error</title>\"\n                            + \"<link rel=\\\"stylesheet\\\" href=\\\"style.css\\\"></head><body>\"\n                            + \"<div class=\\\"login-container\\\"><h2>Registration Error</h2><p>Passwords do not match. Please try again.</p>\"\n                            + \"<a href='/register.html'>Try Again</a></div></body></html>\";\n                    exchange.getResponseHeaders().set(\"Content-Type\", \"text/html; charset=UTF-8\");\n                    byte[] errorBytes = errorHtml.getBytes(StandardCharsets.UTF_8);\n                    exchange.sendResponseHeaders(200, errorBytes.length);\n                    OutputStream osResp = exchange.getResponseBody();\n                    osResp.write(errorBytes);\n                    osResp.close();\n                    return;\n                }\n                String firebaseUrl = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=\" + FIREBASE_API_KEY;\n                URL url = new URL(firebaseUrl);\n                HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n                conn.setRequestMethod(\"POST\");\n                conn.setRequestProperty(\"Content-Type\", \"application/json\");\n                conn.setDoOutput(true);\n                String jsonPayload = \"{\\\"email\\\":\\\"\" + email + \"\\\",\\\"password\\\":\\\"\" + password + \"\\\",\\\"returnSecureToken\\\":true}\";\n                OutputStream os = conn.getOutputStream();\n                os.write(jsonPayload.getBytes(StandardCharsets.UTF_8));\n                os.close();\n                int responseCode = conn.getResponseCode();\n                if (responseCode == 200) {\n                    exchange.getResponseHeaders().set(\"Location\", \"/index.html\");\n                    exchange.sendResponseHeaders(302, -1);\n                    return;\n                } else {\n                    InputStream errorStream = conn.getErrorStream();\n                    InputStreamReader isrError = new InputStreamReader(errorStream, StandardCharsets.UTF_8);\n                    BufferedReader in = new BufferedReader(isrError);\n                    StringBuilder response = new StringBuilder();\n                    while ((line = in.readLine()) != null) {\n                        response.append(line);\n                    }\n                    in.close();\n                    String errorResponse = response.toString();\n                    String userMessage = \"Registration failed. Please try again.\";\n                    if (errorResponse.contains(\"EMAIL_EXISTS\")) {\n                        userMessage = \"This email is already registered. Please use a different email.\";\n                    }\n                    String errorHtml = \"<!DOCTYPE html><html lang=\\\"en\\\"><head><meta charset=\\\"UTF-8\\\"><title>Registration Error</title>\"\n                            + \"<link rel=\\\"stylesheet\\\" href=\\\"style.css\\\"></head><body>\"\n                            + \"<div class=\\\"login-container\\\"><h2>Registration Error</h2><p>\" + userMessage + \"</p>\"\n                            + \"<a href='/register.html'>Try Again</a></div></body></html>\";\n                    exchange.getResponseHeaders().set(\"Content-Type\", \"text/html; charset=UTF-8\");\n                    byte[] errorBytes = errorHtml.getBytes(StandardCharsets.UTF_8);\n                    exchange.sendResponseHeaders(200, errorBytes.length);\n                    OutputStream osResp = exchange.getResponseBody();\n                    osResp.write(errorBytes);\n                    osResp.close();\n                }\n            } else {\n                exchange.sendResponseHeaders(405, -1);\n            }\n        }\n    }\n\n    static class ForgotPasswordHandler implements HttpHandler {\n        private final String basePath = \"src/main/resources\";\n        public void handle(HttpExchange exchange) throws IOException {\n            if (\"GET\".equalsIgnoreCase(exchange.getRequestMethod())) {\n                String fileName = \"/forgot.html\";\n                File file = new File(basePath + fileName).getCanonicalFile();\n                if (!file.isFile()) {\n                    exchange.sendResponseHeaders(404, 0);\n                    exchange.getResponseBody().close();\n                    return;\n                }\n                String mime = \"text/html\";\n                exchange.getResponseHeaders().set(\"Content-Type\", mime);\n                byte[] bytes = Files.readAllBytes(file.toPath());\n                exchange.sendResponseHeaders(200, bytes.length);\n                OutputStream os = exchange.getResponseBody();\n                os.write(bytes);\n                os.close();\n                return;\n            } else if (\"POST\".equalsIgnoreCase(exchange.getRequestMethod())) {\n                InputStreamReader isr = new InputStreamReader(exchange.getRequestBody(), StandardCharsets.UTF_8);\n                BufferedReader br = new BufferedReader(isr);\n                StringBuilder buf = new StringBuilder();\n                String line;\n                while ((line = br.readLine()) != null) {\n                    buf.append(line);\n                }\n                String formData = buf.toString();\n                String email = \"\";\n                String[] pairs = formData.split(\"&\");\n                for (String pair : pairs) {\n                    String[] parts = pair.split(\"=\");\n                    if (parts.length == 2) {\n                        String key = URLDecoder.decode(parts[0], \"UTF-8\");\n                        String value = URLDecoder.decode(parts[1], \"UTF-8\");\n                        if (key.equals(\"email\")) {\n                            email = value;\n                        }\n                    }\n                }\n                String firebaseUrl = \"https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key=\" + FIREBASE_API_KEY;\n                URL url = new URL(firebaseUrl);\n                HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n                conn.setRequestMethod(\"POST\");\n                conn.setRequestProperty(\"Content-Type\", \"application/json\");\n                conn.setDoOutput(true);\n                String jsonPayload = \"{\\\"requestType\\\":\\\"PASSWORD_RESET\\\",\\\"email\\\":\\\"\" + email + \"\\\"}\";\n                OutputStream os = conn.getOutputStream();\n                os.write(jsonPayload.getBytes(StandardCharsets.UTF_8));\n                os.close();\n                int responseCode = conn.getResponseCode();\n                if (responseCode == 200) {\n                    String successHtml = \"<!DOCTYPE html><html lang=\\\"en\\\"><head><meta charset=\\\"UTF-8\\\"><title>Password Reset</title>\"\n                            + \"<link rel=\\\"stylesheet\\\" href=\\\"style.css\\\"></head><body>\"\n                            + \"<div class=\\\"login-container\\\"><h2>Password Reset</h2><p>A password reset email has been sent. Please check your inbox.</p>\"\n                            + \"<a href='/index.html'>Back to Login</a></div></body></html>\";\n                    exchange.getResponseHeaders().set(\"Content-Type\", \"text/html; charset=UTF-8\");\n                    byte[] successBytes = successHtml.getBytes(StandardCharsets.UTF_8);\n                    exchange.sendResponseHeaders(200, successBytes.length);\n                    OutputStream osResp = exchange.getResponseBody();\n                    osResp.write(successBytes);\n                    osResp.close();\n                } else {\n                    InputStream errorStream = conn.getErrorStream();\n                    InputStreamReader isrError = new InputStreamReader(errorStream, StandardCharsets.UTF_8);\n                    BufferedReader in = new BufferedReader(isrError);\n                    StringBuilder response = new StringBuilder();\n                    while ((line = in.readLine()) != null) {\n                        response.append(line);\n                    }\n                    in.close();\n                    String userMessage = \"Failed to send password reset email. Please try again.\";\n                    String errorHtml = \"<!DOCTYPE html><html lang=\\\"en\\\"><head><meta charset=\\\"UTF-8\\\"><title>Forgot Password Error</title>\"\n                            + \"<link rel=\\\"stylesheet\\\" href=\\\"style.css\\\"></head><body>\"\n                            + \"<div class=\\\"login-container\\\"><h2>Forgot Password Error</h2><p>\" + userMessage + \"</p>\"\n                            + \"<a href='/forgot.html'>Try Again</a></div></body></html>\";\n                    exchange.getResponseHeaders().set(\"Content-Type\", \"text/html; charset=UTF-8\");\n                    byte[] errorBytes = errorHtml.getBytes(StandardCharsets.UTF_8);\n                    exchange.sendResponseHeaders(200, errorBytes.length);\n                    OutputStream osResp = exchange.getResponseBody();\n                    osResp.write(errorBytes);\n                    osResp.close();\n                }\n            } else {\n                exchange.sendResponseHeaders(405, -1);\n            }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/Login.java b/src/main/java/org/example/Login.java
--- a/src/main/java/org/example/Login.java	(revision be79d737a3a557af2c8d8beae23a4ff901096d7d)
+++ b/src/main/java/org/example/Login.java	(date 1740532668842)
@@ -11,8 +11,7 @@
 import com.sun.net.httpserver.*;
 
 public class Login {
-    private static final String FIREBASE_API_KEY = "AIzaSyAuSN96Py8Sr0xONWOG_LpOPSZ6EgerX98";
-
+    private static final String FIREBASE_API_KEY = System.getenv("FIREBASE_API_KEY");
     public static void main(String[] args) throws Exception {
         HttpServer server = HttpServer.create(new InetSocketAddress(8000), 0);
         server.createContext("/", new StaticFileHandler());
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"e72c0420-fe48-4af3-a363-18d6d8618447\" name=\"Changes\" comment=\"Fixed an issue where the login button on the forgot password page and register page did not correctly take you back to the login screen.\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"JavaScript File\" />\n        <option value=\"HTML File\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Rebase.Settings\">\n    <option name=\"NEW_BASE\" value=\"master\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"Jay\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 0\n}</component>\n  <component name=\"ProjectId\" id=\"2silX4Ad7QxpEGCGJyFfJLcrVIc\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;DefaultHtmlFileTemplate&quot;: &quot;HTML File&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;onboarding.tips.debug.path&quot;: &quot;C:/Users/Jkoll/source/repos/Calendar-Reservation-System-Project/Budgeting_Application/src/main/java/org/example/Main.java&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RunManager\" selected=\"Application.Login\">\n    <configuration name=\"Login\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.example.Login\" />\n      <module name=\"Budgeting_Application\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"org.example.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Login\" type=\"Application\" factoryName=\"Application\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.example.Login\" />\n      <module name=\"Budgeting_Application\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"index.html\" type=\"JavascriptDebugType\" temporary=\"true\" nameIsGenerated=\"true\" uri=\"http://localhost:63342/Budgeting_Application/src/main/resources/index.html\" useBuiltInWebServerPort=\"true\">\n      <method v=\"2\" />\n    </configuration>\n    <list>\n      <item itemvalue=\"Application.Login\" />\n      <item itemvalue=\"JavaScript Debug.index.html\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Login\" />\n        <item itemvalue=\"JavaScript Debug.index.html\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"e72c0420-fe48-4af3-a363-18d6d8618447\" name=\"Changes\" comment=\"\" />\n      <created>1738946314708</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1738946314708</updated>\n      <workItem from=\"1738946315728\" duration=\"105000\" />\n      <workItem from=\"1738949174495\" duration=\"3233000\" />\n      <workItem from=\"1739377683848\" duration=\"349000\" />\n      <workItem from=\"1739499786601\" duration=\"18000\" />\n      <workItem from=\"1739547287123\" duration=\"415000\" />\n      <workItem from=\"1739940993013\" duration=\"7291000\" />\n      <workItem from=\"1739980582226\" duration=\"3394000\" />\n      <workItem from=\"1740173774270\" duration=\"5313000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"First Commit of login\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739547379317</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739547379317</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Home page as well as updated colores\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739947127113</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739947127113</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"workspace.xml\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739947800536</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739947800536</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"workspace.xml\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1739981811416</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1739981811416</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"chatbot feature\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1740202215081</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1740202215081</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"commit for aws\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1740202528054</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1740202528054</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"Fixed an issue where the login button on the forgot password page and register page did not correctly take you back to the login screen.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1740522187034</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1740522187034</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"8\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"First Commit of login\" />\n    <MESSAGE value=\"Home page as well as updated colores\" />\n    <MESSAGE value=\"workspace.xml\" />\n    <MESSAGE value=\"chatbot feature\" />\n    <MESSAGE value=\"commit for aws\" />\n    <MESSAGE value=\"Fixed an issue where the login button on the forgot password page and register page did not correctly take you back to the login screen.\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Fixed an issue where the login button on the forgot password page and register page did not correctly take you back to the login screen.\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision be79d737a3a557af2c8d8beae23a4ff901096d7d)
+++ b/.idea/workspace.xml	(date 1740531017504)
@@ -4,7 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="e72c0420-fe48-4af3-a363-18d6d8618447" name="Changes" comment="Fixed an issue where the login button on the forgot password page and register page did not correctly take you back to the login screen." />
+    <list default="true" id="e72c0420-fe48-4af3-a363-18d6d8618447" name="Changes" comment="Attempting to fix the API key issue by storing it in aws instead">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Login.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/Login.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -42,27 +45,28 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;DefaultHtmlFileTemplate&quot;: &quot;HTML File&quot;,
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;onboarding.tips.debug.path&quot;: &quot;C:/Users/Jkoll/source/repos/Calendar-Reservation-System-Project/Budgeting_Application/src/main/java/org/example/Main.java&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Application.Login.executor": "Run",
+    "DefaultHtmlFileTemplate": "HTML File",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "git-widget-placeholder": "main",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "onboarding.tips.debug.path": "C:/Users/Jkoll/source/repos/Calendar-Reservation-System-Project/Budgeting_Application/src/main/java/org/example/Main.java",
+    "vue.rearranger.settings.migration": "true"
   }
-}</component>
+}]]></component>
   <component name="RunManager" selected="Application.Login">
     <configuration name="Login" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="org.example.Login" />
-      <module name="Budgeting_Application" />
+      <module name="firebase-login-app" />
       <extension name="coverage">
         <pattern>
           <option name="PATTERN" value="org.example.*" />
@@ -167,7 +171,15 @@
       <option name="project" value="LOCAL" />
       <updated>1740522187034</updated>
     </task>
-    <option name="localTasksCounter" value="8" />
+    <task id="LOCAL-00008" summary="Fixed an issue where the login button on the forgot password page and register page did not correctly take you back to the login screen.">
+      <option name="closed" value="true" />
+      <created>1740530775515</created>
+      <option name="number" value="00008" />
+      <option name="presentableId" value="LOCAL-00008" />
+      <option name="project" value="LOCAL" />
+      <updated>1740530775515</updated>
+    </task>
+    <option name="localTasksCounter" value="9" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -191,6 +203,7 @@
     <MESSAGE value="chatbot feature" />
     <MESSAGE value="commit for aws" />
     <MESSAGE value="Fixed an issue where the login button on the forgot password page and register page did not correctly take you back to the login screen." />
-    <option name="LAST_COMMIT_MESSAGE" value="Fixed an issue where the login button on the forgot password page and register page did not correctly take you back to the login screen." />
+    <MESSAGE value="Attempting to fix the API key issue by storing it in aws instead" />
+    <option name="LAST_COMMIT_MESSAGE" value="Attempting to fix the API key issue by storing it in aws instead" />
   </component>
 </project>
\ No newline at end of file
